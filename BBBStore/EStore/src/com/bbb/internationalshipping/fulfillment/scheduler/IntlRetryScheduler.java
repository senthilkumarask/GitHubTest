package com.bbb.internationalshipping.fulfillment.scheduler;

import com.bbb.internationalshipping.fulfillment.processor.InternationalPurchaseOrderProcessor;
import com.bbb.internationalshipping.manager.InternationalOrderConfirmationManager;

import atg.service.scheduler.ScheduledJob;
import atg.service.scheduler.Scheduler;
import atg.service.scheduler.SingletonSchedulableService;



/**
 * The Class POProcessScheduler.The Scheduler fulfills the ATG order through PO files
 * generated by Borderfree
 * 
 */
public class IntlRetryScheduler extends SingletonSchedulableService {
	/** The international purchase order processor. */
	private InternationalPurchaseOrderProcessor internationalPurchaseOrderProcessor;

	private boolean disablePORetry;
	private boolean disableRetryOrderConfirmation;
	private InternationalOrderConfirmationManager orderConfirmationMgr;
	
	
	public InternationalOrderConfirmationManager getOrderConfirmationMgr() {
		return orderConfirmationMgr;
	}

	public void setOrderConfirmationMgr(
			InternationalOrderConfirmationManager orderConfirmationMgr) {
		this.orderConfirmationMgr = orderConfirmationMgr;
	}


	/** Disable current scheduler from executing its task. */
	private boolean disableService;

	
	
	public boolean isDisablePORetry() {
		return disablePORetry;
	}

	public void setDisablePORetry(boolean disablePORetry) {
		this.disablePORetry = disablePORetry;
	}

	public boolean isDisableRetryOrderConfirmation() {
		return disableRetryOrderConfirmation;
	}

	public void setDisableRetryOrderConfirmation(
			boolean disableRetryOrderConfirmation) {
		this.disableRetryOrderConfirmation = disableRetryOrderConfirmation;
	}

	/**
	 * Disable current scheduler from executing its task.
	 * 
	 * @return boolean value for enable/disable for scheduler.
	 */
	public boolean isDisableService() {
		return disableService;
	}

	/**
	 * Disable current scheduler from executing its task.
	 * 
	 * @param pDisableService
	 *            Value for disableService will be set by properties file.
	 */
	public void setDisableService(final boolean pDisableService) {
		this.disableService = pDisableService;
	}

	/**
	 * Gets the international purchase order processor.
	 *
	 * @return the international purchase order processor
	 */
	public InternationalPurchaseOrderProcessor getInternationalPurchaseOrderProcessor() {
		return internationalPurchaseOrderProcessor;
	}

	/**
	 * Sets the international purchase order processor.
	 *
	 * @param internationalPurchaseOrderProcessor 
	 * the new international purchase order processor
	 */
	public void setInternationalPurchaseOrderProcessor(
			final InternationalPurchaseOrderProcessor internationalPurchaseOrderProcessor) {
		this.internationalPurchaseOrderProcessor = internationalPurchaseOrderProcessor;
	}

	/**
	 * This method will be called internally when the Scheduler component
	 * is invoked, based on a scheduler.
	 *
	 * @param scheduler the scheduler
	 * @param scheduledjob the scheduled job
	 */
	public void doScheduledTask(final Scheduler scheduler, final ScheduledJob scheduledjob) {
		this.logInfo(":: Entering doScheduledTask ");

		if (!isDisableService()) {
			if(!isDisablePORetry()){
				
			internationalPurchaseOrderProcessor.retryPOFileProcessing();
			}
			if(!isDisableRetryOrderConfirmation()){
				orderConfirmationMgr.retryOrderConfirmation();
			}
		}else{
			this.logInfo("POProcessScheduler did not start because it's not enabled");
		}
		this.logDebug(":: Exiting doScheduledTask ");
	}	


	/**
	 * Helps to trigger schedule task manually
	 */
	public void executeDoScheduledTask() {

		this.logDebug("Entry executeDoScheduledTask");

		doScheduledTask(null,
				new ScheduledJob("IntlRetryScheduler", "Scheduler to retry processing of failed PO files and resend failed order confirmation ", "", null, null, false));

		this.logDebug("Exit executeDoScheduledTask");

	}

    public void logDebug(final String pMessage) {
        if (this.isLoggingDebug()) {
            this.logDebug(pMessage, null);
        }
    }
    
    public void logInfo(final String pMessage) {
        if (this.isLoggingInfo()) {
            this.logInfo(pMessage, null);
        }
    }
}
