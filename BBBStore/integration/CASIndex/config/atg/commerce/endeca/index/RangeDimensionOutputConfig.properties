$class=atg.endeca.index.EndecaIndexingOutputConfig
$description=Output configuration for indexing Range Dimension to the dimension record store


# The definition file that defines our indexing output (what properties
# to output.
definitionFile=/atg/commerce/endeca/index/bbb-range-dimension-output-config.xml

# The ProductCatalog repository. Note that this should be the same
# repository as that used by the repositoryItemGroup component
#repository^=/atg/commerce/search/ProductCatalogOutputConfig.repository
repository=/com/bbb/search/endeca/indexing/repository/RangeDimensionRepository
#repository=/atg/commerce/catalog/ProductCatalog

# The bulk loader component
bulkLoader=/atg/search/repository/BulkLoader

# The incremental loader component
incrementalLoader=/atg/search/repository/IncrementalLoader

# The document submitter to use.  In this
# case, we use a Batch Push Index submitter 
#documentSubmitter=BpiDocumentSubmitter

# Never do incremental updates, because SearchAdmin now handles this
incrementalUpdateMinutes=-1

# A flag to indicate if we should employ incremental indexing
# on the catalog repository. 
enableIncrementalLoading=true

# VariantProducer component for creating multiple variants of XHTML
# documents representing the same repository item. Variants may be
# needed to represent localized content in a repository item, or items
# in a certain context (such as catalog-specific product names in a
# commerce catalog. Use CustomCatalogVariantProducer when using
# catalog-specific property values or CRS style faceting
#variantProducers^=/atg/commerce/search/ProductCatalogOutputConfig.variantProducers
#variantProducers+=\
#	/atg/commerce/endeca/index/CategoryPathVariantProducer,\
#	/atg/commerce/search/CustomCatalogVariantProducer,\
#	/atg/commerce/search/LocaleVariantProducer

variantProducers+=\/atg/commerce/search/LocaleVariantProducer
  
# Specify whether scheduled bulk loading is enabled.

enableScheduledBulkLoading=false

# Indexing synchronization callbacks to take care of additional 
# info such as refine configs

# in this case, we need to emit a root catalog/category node
# indexingSynchronizations+=/atg/endeca/index/DeleteMissingIndexingSynchronization

indexingSynchronizations+=\
  /atg/commerce/endeca/index/DynamicPropertySchemaSynchronization
# Property accessor implementations that handle generation
# of multiple documents based on their catalog specific 
# values stored in info objects and prices.
# 

propertyAccessorMap^=/atg/commerce/search/ProductCatalogOutputConfig.propertyAccessorMap

# prepend with type prefixes
#replaceWithTypePrefixes=.

# since we aren't using ATG Search Admin, we need to
# auto create incremental change queues.
autoCreateInitialQueues=true

loggingDebug=false

#idOutputPropertyName=dimval.qualified_spec

# use the same site IDs as on ProductCatalogOutputConfig
siteIDsToIndex^=/atg/commerce/search/ProductCatalogOutputConfig.siteIDsToIndex

# our indexingApplicationConfiguration, from which we get Locale
# information.
indexingApplicationConfiguration=/atg/endeca/index/RangeDimensionIndexingApplicationConfiguration

forceToBaselineOnChange=true

# This ConfigRepositoryItemChangedProcessor is used to filter items from the IncrementalItemQueue
# in order to limit the number of forced baseline indexes for category changes

#Write a customized Document Submitter and reference it from the below:
documentSubmitter=/atg/endeca/index/RangeDimensionDocumentSubmitter

#configRepositoryItemChangedProcessor=/atg/commerce/endeca/index/CategoryRepositoryItemChangedProcessor