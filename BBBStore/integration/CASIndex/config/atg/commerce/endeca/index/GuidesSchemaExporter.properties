# @version $Id: //product/DCS/version/11.1/templates/DCS/Endeca/Index/config/atg/commerce/endeca/index/SchemaExporter.properties#3 $$Change: 889945 $
$class=atg.endeca.index.schema.SchemaExporter

indexingOutputConfig=/atg/commerce/search/ProductGuidesOutputConfig

# additional schema records to be layered on the catalog.
# supplementalSchemaRecords=/atg/commerce/search/product-catalog-additional-schema.xml

documentSubmitter=/atg/endeca/index/ConfigImportDocumentSubmitter

# generate for each application specified by the
# IndexingApplicationConfiguration
indexingApplicationConfiguration=/atg/endeca/index/IndexingApplicationConfiguration

# List of dimension source name providers. These can provide a different
# dimension source name. Typically done by dimension record exporters.
dimensionNameProviders+=RepositoryTypeDimensionExporter


# make product.parentCategory.id map to the dimension name product.category
# since there's no convenient dimension name provider
propertyNameToDimensionName=\
  product.parentCategory.id=product.category


# MetaPropertiesHelper is used to get display names via IndexingPropertyProvider
metaPropertiesHelper=/atg/endeca/index/MetaPropertiesHelper


# Since we are using the DynamicPropertySchemaSynchronization, we 
# turn off generating schema records for generative properties
# (which generally just defines properties that don't actually exist)
skipPropertiesWithGenerativePropertyAccessors=true

# export to one record store for all locales
defaultLanguageForRecordStores^=/atg/endeca/index/DataDocumentSubmitter.defaultLanguageForRecordStores

# whether to echo records to stdout
# echoRecordsToStdout=true

# Following settings for using the new-style CAS deployment tempate:
#
# documentSubmitter=/atg/endeca/index/ConfigImportDocumentSubmitter
