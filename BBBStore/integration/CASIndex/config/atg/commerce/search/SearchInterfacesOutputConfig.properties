$class=atg.endeca.index.EndecaIndexingOutputConfig
$scope=global
$description=Output configuration for commerce catalog indexing
loggingTrace=false
loggingError=true
definitionFile=/atg/commerce/endeca/index/bbb-search-interfaces-output-config.xml
#variantProducers=\
#		CustomCatalogVariantProducer,\
#		/atg/search/repository/UniqueSiteVariantProducer
repositoryItemGroup=
repository=/com/bbb/searchConfig/SearchConfig 

# The bulk loader component
bulkLoader=/atg/search/repository/BulkLoader

# The incremental loader component
incrementalLoader=/atg/search/repository/IncrementalLoader

# Never do incremental updates, because SearchAdmin now handles this
incrementalUpdateMinutes=-1

# A flag to indicate if we should employ incremental indexing
# on the catalog repository.
enableIncrementalLoading=true

# VariantProducer component for creating multiple variants of XHTML
# documents representing the same repository item. Variants may be
# needed to represent localized content in a repository item, or items
# in a certain context (such as catalog-specific product names in a
# commerce catalog. Use CustomCatalogVariantProducer when using
# catalog-specific property values or CRS style faceting
variantProducers=\
  LocaleVariantProducer 

# Specify whether scheduled bulk loading is enabled.
enableScheduledBulkLoading=false

# Property accessor implementations that handle generation
# of multiple documents based on their catalog specific 
# values stored in info objects and prices.
# 
propertyAccessorMap=
  #customCatalog=CustomCatalogPropertyAccessor,\
  #pricePropertyAccessor=/atg/commerce/search/PriceListMapPropertyAccessor
  
# Resource bundle name which is used to get localized names of non-repository properties.
resourceBundleName=atg.commerce.search.ProductCatalogOutputConfigResources

# Replace the specified prefix with the type that owns the following
# property (if any). These prefixes should map to repository items, rather
# than to individual properties. A period represents the base item.

replaceWithTypePrefixes=.,childSKUs

#everyItemOutputProperties=$repositoryId:repositoryId,$repository.repositoryName:repositoryName,$itemDescriptor.itemDescriptorName:itemDescriptorName

# The prefix replacemement map. These are applied AFTER the
# replaceWithTypePrefixes
prefixReplacementMap=\
  product.ancestorCategories=allAncestors

# The suffix replacement map. Mostly useful for (and is auto-populated with)
# mappings for "$repositoryId=repositoryId", since endeca search property
# names cannot contain "$" characters. The suffixReplacementMap is applied
# after replaceWithTypePrefixes.
#
# suffixReplacementMap=

# Use our default RecordStoreDocumentSubmitter
documentSubmitter=/atg/endeca/index/SearchInterfacesImporterDocumentSubmitter

# since we aren't using ATG Search Admin, we need to
# auto create incremental change queues.
autoCreateInitialQueues=true


# Add our our DynamicPropertySchemaSynchronization as an 
# IndexingSynchronizations so it will submit records to
# the schema records tore for dynamic properties
indexingSynchronizations+=\
  /atg/commerce/endeca/index/DynamicPropertySchemaSynchronization

# Add our our DynamicPropertySchemaSynchronization as an 
# processingPropertiesCallback so it will track
# dynamic properties as they are generated
processingPropertiesCallbacks+=\
  /atg/commerce/endeca/index/DynamicPropertySchemaSynchronization

# list of site IDs to index. Limits indexing to the explicit list of sties.
# If null (the default), will index all sites.
#
# siteIDsToIndex=

# Set document id generator to use explicitly generated ids rather than
# item URL as id
documentIdGenerator=/atg/search/repository/DocumentIdGenerator

# List of Ids of the categories that should not be exclude from dimvals
# and such that all products/skus belonging to these categories and only these categories are excluded as well
# the following example is the categories that are excluded for CRS
# excludedItemsAncestorIds=NonNavigableProducts,homeStoreNonNavigableProducts

# our indexingApplicationConfiguration, from which we get Locale
# information.
indexingApplicationConfiguration=/atg/endeca/index/SearchIndexingApplicationConfiguration

