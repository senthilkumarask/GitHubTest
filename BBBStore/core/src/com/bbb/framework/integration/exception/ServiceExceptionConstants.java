/*
 *
 * File  : ServiceExceptionConstants.java
 * Project:     BBB
 */
package com.bbb.framework.integration.exception;

// Manohar
/*import com.bbb.ecommerce.utility.LoggerUtil;*/
// TODO: ServiceExceptionConstants - uncomment the above line once loggerUtil is implemented

/**
 * The Class ServiceExceptionConstants.
 * 
 *
 * @version 1.0
 */
public class ServiceExceptionConstants {
	
	/** The logger util. */
	// TODO Manohar
	// TODO: ServiceException - Uncomment the below line once loggerUtil is implemented
	/*protected static LoggerUtil loggerUtil = LoggerUtil.getInstance("ServiceExceptionConstants");*/

	/**
	 * The Enum ServiceErrorType.
	 */
	public enum ServiceErrorType {
		
		/** The SYSTEM. */
		SYSTEM, 
		
		/** The DATA. */
		DATA
	};
	
	/**
	 * The Enum ServiceRequestError.
	 */
	public enum ServiceRequestError implements ServiceError { 		
		UNKNOWN (ServiceErrorType.SYSTEM),
		MARSHALLING_HEADER_PARSING_ERROR (ServiceErrorType.SYSTEM),
		MARSHALLING_REQUEST_PARSING_ERROR (ServiceErrorType.SYSTEM),
		MISSING_INPUT_PARAM (ServiceErrorType.DATA);
		
		/** The err type. */
		private ServiceErrorType errType;
		
		/**
		 * Instantiates a new service request error.
		 * 
		 * @param errType the err type
		 */
		ServiceRequestError(final ServiceErrorType errType) {
			this.errType = errType;
		}
		
		/* (non-Javadoc)
		 * @see com.bbb.integration.api.exception.ServiceError#getErrorType()
		 */
		public ServiceErrorType getErrorType() {
			return this.errType;
		}
	}
	
	/**
	 * The Enum ServiceResponseError.
	 */
	public enum ServiceResponseError implements ServiceError { 
		
		// TODO Manohar
		// TODO: ServiceException - Have different error codes for different types of errors
		// TODO: These error codes might change based on the error codes given
		// by the web service host and individual track is responsible to change
		// these error codes accordingly. error codes starting from 701 are all
		// just for example. For example: if some one is using this class to
		// represent Facebook service errors then error codes would start from
		// 403, 408.
		
		/* couple of examples are shown below*/
		
		// Used only in cases where the data specifically requested by the front
		// end is not found. This code applies to web service lookups as well as
		// backend "no data found" exceptions.
		DATA_NOT_FOUND (ServiceErrorType.DATA, "Client.701"),
		
		// Use me when multiple records are found when only one is expected.
		MULTIPLE_RECORDS_FOUND (ServiceErrorType.DATA, "Server.703"),
		
		// Use me when web service gets an error (e.g., an ORA-* exception) from a
		// database.
		DATABASE_ERROR (ServiceErrorType.SYSTEM, "Server.702"),
		
		// Use me for input validation errors. It includes XSD schema errors as
		// well as code-checked validations. It can be both Data or System
		INPUT_VALIDATION_ERROR (ServiceErrorType.DATA, "Client.705"),
		
		// Use me for output validation errors. It includes response XSD schema
		// errors. Response could be generated by the backend or any web service
		// system
		OUTPUT_VALIDATION_ERROR (ServiceErrorType.SYSTEM, "Server.706"),
		
		// Use me when authentication or authorization with any web service
		// fails
		SECURITY_INVALIDATION_ERROR (ServiceErrorType.SYSTEM, "Client.707"),
		
		// Use me when database connectivity or timeout issues occur
		INTERNAL_DATABASE_ERROR (ServiceErrorType.SYSTEM, "Server.803"),
		
		// Use me to mention any connectivity problem or timeout issues with any
		// web service
		COMMUNICATION_ERROR (ServiceErrorType.SYSTEM, "Server.804"),
		
		// Use me when transaction could not be completed due to high volume
		// experienced by the receiving service Server
		SERVICE_UNAVAILABLE_ERROR (ServiceErrorType.SYSTEM, "Server.805"),
		
		
		WEBSERVICE_UNKNOWN_FAULT_CODE (ServiceErrorType.SYSTEM, "UNK.FAULT.999"), 
		
		// Following are the error codes that can be used be marshaller and
		// unmarshaller
		UNKNOWN (ServiceErrorType.SYSTEM, "BBB.000"),
		SERVICE_NOT_AVAILABLE (ServiceErrorType.SYSTEM, "BBB.001"),
		SOAP_RESPONSE_PARSING_ERROR (ServiceErrorType.SYSTEM, "BBB.002"),
		AXIS_FAULT (ServiceErrorType.SYSTEM, "BBB.003"),
		UNMARSHALLING_RESPONSE_PARSING_ERROR (ServiceErrorType.SYSTEM, "BBB.004");
				
		/** The err type. */
		private ServiceErrorType errType = ServiceErrorType.SYSTEM;
		
		/** The backend code. */
		private String backendCode = null;
		
		/**
		 * Instantiates a new service response error.
		 * 
		 * @param errType the err type
		 * @param backendCode the backend code
		 */
		ServiceResponseError(final ServiceErrorType errType, final String backendCode) {
			this.errType = errType;
			this.backendCode = backendCode;
		}
		
		/* (non-Javadoc)
		 * @see com.bbb.integration.api.exception.ServiceError#getErrorType()
		 */
		public ServiceErrorType getErrorType() {
			return this.errType;
		}
		
		/**
		 * Gets the error from backend code.
		 * 
		 * @param backendCode the backend code
		 * 
		 * @return the error from backend code
		 */
		public static ServiceResponseError getErrorFromBackendCode(final String backendCode) {
			ServiceResponseError error = null;
			for (ServiceResponseError e : ServiceResponseError.values()) {
				if (backendCode.contains(e.backendCode)) {
					error = e;
					break;
				}
			} // end-for
			if (error==null) {
				// failed to find matching backend-code
				// TODO Manohar
				// TODO ServiceException - Uncomment the below line once loggerUtil is implemented
				/*loggerUtil.logError("Unable to match this error-code from Webservice: " + backendCode);*/
				error = UNKNOWN;
			}
			return error;
		}
		
		public static ServiceResponseError getExactErrorFromBackendCode(final String backendCode) {
			ServiceResponseError error = null;
			for (ServiceResponseError e : ServiceResponseError.values()) {
				if (backendCode.equals(e.backendCode)) {
					error = e;
					break;
				}
			} // end-for
			return error;
		}
		
		/**
		 * Gets the backend error code.
		 * 
		 * @param error the error
		 * 
		 * @return the backend error code
		 */
		public static String getBackendErrorCode(final ServiceResponseError error) {
			return error.backendCode;
		}
	}

}
